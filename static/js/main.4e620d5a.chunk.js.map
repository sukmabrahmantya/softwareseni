{"version":3,"sources":["redux/utils.js","redux/data/actions.js","component/card.js","App.js","redux/data/api.js","reportWebVitals.js","redux/rootReducer.js","redux/data/reducer.js","index.js","redux/store.js"],"names":["createActionTypes","actionName","PENDING","SUCCESS","ERROR","createGenericActions","actionNames","pending","type","success","res","payload","error","GET_REPOSITORY","getRepositoryFns","RESET_REPOSITORY","resetRepositoryFns","CardRepository","props","console","log","this","repository","classes","Card","className","root","CardContent","Typography","title","color","gutterBottom","name","pos","ssh_url","variant","component","language","React","Component","withStyles","theme","minWidth","bullet","display","margin","transform","fontSize","marginBottom","App","errorAlert","err","join","Swal","fire","text","icon","showConfirmButton","timer","submited","event","preventDefault","getRepositoryUser","userId","document","getElementById","HTMLInputElement","userIdValue","value","userRepositoryData","errorRepositoryData","resetRepositoryUser","Grid","spacing","container","direction","justify","alignItems","item","noValidate","autoComplete","onSubmit","TextField","textField","id","label","Button","button","startIcon","Search","onClick","Backspace","map","data","index","pacing","mapDispatchToProps","username","dispatch","fetch","method","headers","then","response","json","message","length","msg","catch","marginTop","width","connect","state","dataReducer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","combineReducers","action","ReactDOM","render","store","initialState","createStore","rootReducer","applyMiddleware","thunk","configureStore"],"mappings":"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","file":"static/js/main.4e620d5a.chunk.js","sourcesContent":["\ntype actionTypes = {\n    PENDING: string,\n    SUCCESS: string,\n    ERROR: string,\n}\n\nexport const createActionTypes = (actionName: string): actionTypes => {\n    return {\n        PENDING: `${actionName}_PENDING`,\n        SUCCESS: `${actionName}_SUCCESS`,\n        ERROR: `${actionName}_ERROR`,\n    };\n}\n\nexport const createGenericActions = (actionNames: actionTypes) => {\n    return {\n        pending: () => {\n            return {\n                type: actionNames.PENDING\n            }\n        },\n        success: (res: any) => {\n            return {\n                type: actionNames.SUCCESS,\n                payload: res\n            }\n        },\n        error: (error: any) => {\n            return {\n                type: actionNames.ERROR,\n                payload: error\n            }\n        }\n    }\n}\n\nexport const GITHUB_ROOT_URL = 'https://api.github.com/'\n","import { createActionTypes, createGenericActions } from '../utils'\n\nexport const GET_REPOSITORY = createActionTypes('GET_REPOSITORY')\nexport const getRepositoryFns = createGenericActions(GET_REPOSITORY)\n\nexport const RESET_REPOSITORY = createActionTypes('RESET_REPOSITORY')\nexport const resetRepositoryFns = createGenericActions(RESET_REPOSITORY)","import React from 'react';\nimport {\n    Card,\n    CardContent,\n    Typography\n} from '@material-ui/core';\n\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst styles = theme => ({\n    root: {\n        minWidth: 350,\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        fontSize: 18,\n    },\n    pos: {\n        fontSize: 10,\n        marginBottom: 12,\n    },\n});\n\nclass CardRepository extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render () {\n        console.log('masuk')\n        const { repository, classes } = this.props\n        return (\n            <Card className={classes.root}>\n                <CardContent>\n                    <Typography className={classes.title} color=\"primary\" gutterBottom>\n                        {repository.name}\n                    </Typography>\n                    <Typography className={classes.pos} color=\"textSecondary\">\n                        {repository.ssh_url}\n                    </Typography>\n                    <Typography variant=\"body2\" component=\"p\">\n                        {repository.language}\n                    </Typography>\n                </CardContent>\n            </Card>\n        )\n    }\n}\n\nexport default withStyles(styles)(CardRepository)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport {\n  Grid,\n  TextField,\n  Button,\n  Typography\n} from '@material-ui/core'\n\nimport {\n  Search,\n  Backspace\n} from '@material-ui/icons'\n\nimport {\n  getRepositoryUser,\n  resetRepositoryUser\n} from './redux/data/api'\n\nimport CardRepository from './component/card'\nimport { withStyles } from \"@material-ui/core/styles\"\n\nimport Swal from 'sweetalert2';\nimport './App.css';\n\nconst styles = theme => ({\n  button: {\n    margin: theme.spacing(1),\n  },\n  title: {\n    marginTop: 15,\n    fontSize: 14,\n  },\n  textField: {\n    width: 300\n  }\n});\n\nclass App extends React.Component {\n\n  errorAlert = (err) => {\n      if (typeof err === 'object') err = err.join(' ')\n      Swal.fire({\n          title: 'Error',\n          text: err,\n          icon: 'error',\n          showConfirmButton: false,\n          timer: 3000\n      })\n  }\n\n  submited = (event) => {\n    event.preventDefault()\n    const { getRepositoryUser } = this.props\n    const userId = document.getElementById(\"user-id\")\n\n    if (\n        userId && userId instanceof HTMLInputElement\n    ) {\n        const userIdValue = userId.value;\n        if (!userIdValue){\n            this.errorAlert('Please fill in.')\n        } else {\n            getRepositoryUser(userIdValue)\n        }\n    }\n  }\n  render () {\n    const {\n      userRepositoryData, \n      errorRepositoryData, \n      resetRepositoryUser,\n      classes\n    } = this.props\n\n    return (\n      <div className=\"App\">\n        <Grid\n          spacing={5}\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Grid item>\n            <Typography color=\"primary\" gutterBottom variant=\"h3\">\n              ReactJs Technical Test\n            </Typography>\n            <form \n              noValidate \n              autoComplete=\"off\" \n              onSubmit = {this.submited}\n            >\n              <TextField \n                className={classes.textField} \n                id=\"user-id\" \n                label=\"Github User Id\" \n              />\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.button}\n                startIcon={<Search />}\n                onClick = {this.submited}\n              >\n                Search\n              </Button>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                className={classes.button}\n                startIcon={<Backspace />}\n                onClick = {() => {\n                  document.getElementById(\"user-id\").value = \"\"\n                  resetRepositoryUser()\n                }}\n              >\n                Reset\n              </Button>\n            </form>\n          </Grid>\n          <Grid \n            container \n            spacing={2} \n            direction=\"row\" \n            alignItems=\"center\" \n            justify=\"space-evenly\"\n          >\n            {\n              userRepositoryData ?\n                userRepositoryData.map((data, index) => {\n                  return (\n                    <Grid \n                      item \n                      pacing={3} \n                      key={index} \n                    >\n                      <CardRepository\n                        repository={data}\n                      />\n                    </Grid>\n                  )\n                  })\n              : null\n            }\n            {\n              errorRepositoryData ?\n                <Typography \n                  className={classes.title} \n                  color=\"textSecondary\" \n                  gutterBottom\n                >\n                  {errorRepositoryData}\n                </Typography>\n              : null\n            }\n          </Grid>\n        </Grid>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  const dataReducer = state.data;\n\n  return {\n    userRepositoryData: dataReducer && dataReducer.data,\n    errorRepositoryData: dataReducer && dataReducer.error\n  };\n};\n\nconst mapDispatchToProps = {\n  getRepositoryUser,\n  resetRepositoryUser\n}\n\nexport default withStyles(styles)(connect(mapStateToProps, mapDispatchToProps)(App))","import {\n    getRepositoryFns,\n    resetRepositoryFns\n} from './actions'\n\nimport {  \n    GITHUB_ROOT_URL\n} from '../utils'\n\nexport function getRepositoryUser (username){\n    return dispatch => {\n        dispatch(getRepositoryFns.pending())\n\n        fetch(`${GITHUB_ROOT_URL}users/${username}/repos`, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Access-Control-Request-Headers\": \"*\",\n                \"Access-Control-Request-Method\": \"*\",\n            }\n        }).then(function(response) {\n            return response.json()\n        }).then(function(data) {\n            console.log(data)\n            if(data.message || data.length == 0) dispatch(getRepositoryFns.error({msg: data.message ? data.message : 'Undefined'}))\n            else dispatch(getRepositoryFns.success(data))\n        }).catch(err => {\n            dispatch(getRepositoryFns.error(err))\n        })\n    }\n}\n\nexport function resetRepositoryUser (){\n    return dispatch => {\n        dispatch(resetRepositoryFns.success())\n    }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux'\nimport data from './data/reducer'\n\nexport default combineReducers ({\n    data\n})","import {\n    GET_REPOSITORY,\n    RESET_REPOSITORY\n} from './actions'\n\nexport default (state = {}, action) => {\n    const payload = action.payload\n    switch (action.type) {\n        case GET_REPOSITORY.PENDING: \n            return {\n                ...state,\n                error: \"\",\n                data: \"\"\n            }\n        case GET_REPOSITORY.SUCCESS: \n            return {\n                ...state,\n                data: payload\n            }\n        case GET_REPOSITORY.ERROR: \n            return {\n                ...state,\n                error: payload.msg\n            }\n        case RESET_REPOSITORY.SUCCESS: \n            return {\n                ...state,\n                data: \"\"\n            }\n        default:\n            return state\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport configureStore from './redux/store'\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './rootReducer'\n\nexport default function configureStore( initialState = {} ) {\n    return createStore (\n        rootReducer,\n        initialState,\n        applyMiddleware(thunk)\n    )\n}"],"sourceRoot":""}